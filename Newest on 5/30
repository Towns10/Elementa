using System;
using System.IO;
using System.Timers;

namespace ElementaProject
{
    class Working
    {

        static void Main()
        {
            Player pc = new Player();
            StarterArea sa = new StarterArea();
            Console.WriteLine("Welcome to Elementa, what is your name?");
            pc.playerName = Console.ReadLine();
            pc.playerLocation = "Center";
            sa.CenterLoc();
            do
            {
                

                switch (Console.ReadLine)
                {
                    case "look":
                        //look method
                        break;
                    case "inventory":
                        //inventory method
                        break;
                    case "attack":
                        //attack method
                        break;
                    case "verbs":
                        pw.VerbList();
                        break;
                    case "cast":
                        //cast method
                        break;
                    case "n":
                        if (sa.newLocationNorth == String.Empty)
                        {
                            Console.WriteLine("You cannot go that way.");
                        }
                        else
                        {
                            pc.playerLocation = sa.newLocationNorth;
                            pc.playerStamina--;
                        }
                        break;
                    case "e":
                        if (sa.newLocationEast == String.Empty)
                        {
                            Console.WriteLine("You cannot go that way.");
                        }
                        else
                        {
                            pc.playerLocation = sa.newLocationEast;
                            pc.playerStamina--;
                        }
                        break;
                    case "s":
                        if (sa.newLocationSouth == String.Empty)
                        {
                            Console.WriteLine("You cannot go that way.");
                        }
                        else
                        {
                            pc.playerLocation = sa.newLocationSouth;
                            pc.playerStamina--;
                        }
                        break;
                    case "w":
                        if (sa.newLocationWest == String.Empty)
                        {
                            Console.WriteLine("You cannot go that way.");
                        }
                        else
                        {
                            pc.playerLocation = sa.newLocationWest;
                            pc.playerStamina--;
                        }
                        break;
                }
            } while (pc.playerHealth > 0);
        }
    }


    public class Publics
    {
        public static string[] verbList = { "look", "inventory", "attack", "verbs", "cast" };
        string[] moveList = { "n", "e", "s", "w", "ne", "se", "sw", "nw", "up", "down", "in", "out" };

        public void VerbList()
        {
            Console.WriteLine(" look \r\n inventory \r\n attack \r\n verbs \r\n cast \r\n press any key to continue");
            Console.ReadLine(); 
            Console.WriteLine("directions of travel include \r\n n \r\n s \r\n e \r\n w \r\n ne \r\n se \r\n sw \r\n se \r\n up \r\n down \r\n in \r\n out");
        }

     }
    class StarterArea
    {   //test area for movement
        public string newLocationNorth;
        public string newLocationEast;
        public string newLocationSouth;
        public string newLocationWest;
        public string newLocationNorthEast;
        public string newLocationSouthEast;
        public string newLocationSouthWest;
        string newLocationNorthWest;
        string newLocationUp;
        string newLocationDown;
        string newLocationIn;
        string newLocationOut;    
        public void SetLocs(string n, string e, string s, string w, string ne, string se, string sw, string nw, string u, string d, string i, string o)
        {   //this will change the exits of each square entered when instantiated upon entrance of a square
            newLocationNorth = n;
            newLocationEast = e;
            newLocationSouth = s;
            newLocationWest = w;
            newLocationNorthEast = ne;
            newLocationSouthEast = se;
            newLocationSouthWest = sw;
            newLocationNorthWest = nw;
            newLocationUp = u;
            newLocationDown = d;
            newLocationIn = i;
            newLocationOut = o;
        }
        public void CenterLoc()
        {
            if(Console.ReadLine.Equals("look") == true)
            {
                Console.WriteLine("You stand in a quiet grotto surrounded on all sides by tower pine trees. A soft bed of needles and cones lie underfoot and the quiet chirping of birds can be heard. This place smells of pine sap and the air is crisp and refreshing on the face.");

            }
            else
            {
                Console.WriteLine("You stand in a quiet grotto surrounded on all sides by tower pine trees. A soft bed of needles and cones lie underfoot and the quiet chirping of birds can be heard. This place smells of pine sap and the air is crisp and refreshing on the face.");
                SetLocs("North", "East", "South", "West", "", "", "", "", "", "", "", "");
                Console.WriteLine("You can leave this place and head north, south, east, or west. Where do you wish to go?");        
            }    
        }

        void NorthLoc()
        {

            if(Console.ReadLine.Equals("look") == true)
            {
                Console.WriteLine("This is the road into town. It travels north and south but the path into town going north seems blocked.");

            }
            else
            {
                Console.WriteLine("This is the road into town. It travels north and south but the path into town going north seems blocked.");
                SetLocs("", "", "Center", "", "", "", "", "", "", "", "", "");
                Console.WriteLine("You can leave this place and head south. Where do you wish to go?");       
            } 
        }

        void EastLoc()
        {

            if(Console.ReadLine.Equals("look") == true)
            {
                Console.WriteLine("Welcome to the cesspit. It's foul even for nightsoil.");

            }
            else
            {
                Console.WriteLine("Welcome to the cesspit. It's foul even for nightsoil.");
                SetLocs("", "", "", "Center", "", "", "", "", "", "", "", "");
                Console.WriteLine("You can leave this place and head west. Where do you wish to go?");       
            } 
        }

        void SouthLoc()
        {

            if(Console.ReadLine.Equals("look") == true)
            {
                Console.WriteLine("This is the road into town. It travels north and south but the path out of town going south seems blocked.");

            }
            else
            {
                Console.WriteLine("This is the road into town. It travels north and south but the path out of town going south seems blocked.");
                SetLocs("Center", "", "", "", "", "", "", "", "", "", "", "");
                Console.WriteLine("You can leave this place and head north. Where do you wish to go?");       
            }
        }

        void WestLoc()
        {

            if(Console.ReadLine.Equals("look") == true)
            {
                Console.WriteLine("Welcome to the tavern. It's a wonderful boquette of beer, sweat, and vomit.");

            }
            else
            {
                Console.WriteLine("Welcome to the tavern. It's a wonderful boquette of beer, sweat, and vomit.");
                SetLocs("", "Center", "", "", "", "", "", "", "", "", "", "");
                Console.WriteLine("You can leave this place and head east. Where do you wish to go?");       
            }
        }
    }
    public class Player    //stats for the players
    {
        int playerHealth;
        int playerStamina;
        int playerHit;
        int playerDamage;
        bool playerDamageType;      //if true magic damage used
        string playerName;
        string playerLocation;
    }
    class Enemy     //stats for enemy
    {
        string enemyName;
        int enemyHealth;
        int enemyStamina;
        int enemyHit;
        int enemyDamage;
        bool enemyDamageType;   //if true magic damage used

    }
}
